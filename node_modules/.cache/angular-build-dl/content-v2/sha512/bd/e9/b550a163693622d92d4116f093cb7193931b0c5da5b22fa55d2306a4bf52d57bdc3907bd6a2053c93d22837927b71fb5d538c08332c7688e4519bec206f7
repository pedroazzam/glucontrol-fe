{"version":3,"sources":["webpack:///src/app/hello-world.service.ts","webpack:///src/app/hello-world/hello-world.component.ts","webpack:///src/app/hello-world/hello-world.component.html","webpack:///src/app/login/auth.service.ts","webpack:///src/environments/environment.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/menu/menu.component.ts","webpack:///src/app/menu/menu.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/logout/logout.component.ts","webpack:///src/app/logout/logout.component.html","webpack:///src/app/app-routing.module.ts","webpack:///src/app/login/login.component.ts","webpack:///src/app/login/login.component.html","webpack:///src/app/http-interceptor.service.ts","webpack:///src/main.ts","webpack:///$_lazy_route_resource lazy namespace object"],"names":["HelloWorldService","http","console","log","get","providedIn","HelloWorldComponent","route","router","helloWorldService","welcomeMessage","executeHelloWorldService2","subscribe","res","selector","templateUrl","styleUrls","AuthenticationService","USER_NAME_SESSION_ATTRIBUTE_NAME","username","password","headers","authorization","createBasicAuthToken","pipe","registerSuccessfulLogin","window","btoa","sessionStorage","setItem","removeItem","user","getItem","environment","production","AppComponent","title","MenuComponent","authenticationService","isLoggedIn","isUserLoggedIn","logout","navigate","getLoggedInUserName","AppModule","provide","useClass","multi","declarations","imports","providers","bootstrap","LogoutComponent","routes","path","component","AppRoutingModule","forRoot","exports","LoginComponent","errorMessage","invalidLogin","loginSuccess","result","successMessage","handleLogin","HttpInterceptorService","req","next","url","indexOf","authReq","clone","handle","bootstrapModule","err","error","webpackEmptyAsyncContext","Promise","resolve","then","e","Error","code","keys","module","id"],"mappings":"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","file":"main-es5.js","sourcesContent":["import { HttpClient, HttpHeaderResponse } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { MessageModel } from './message';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class HelloWorldService {\n    constructor(private http: HttpClient) {\n    }\n    executeHelloWorldService() {\n        console.log('Passou aqui executeHelloWorldService inicio');\n        return this.http.get<MessageModel>('http://glucontrol.pedroazzam.me:8080/api/v1/greeting');\n    }\n\n    executeHelloWorldService2() {\n        console.log('Passou aqui executeHelloWorldService2 inicio');\n        return this.http.get('http://glucontrol.pedroazzam.me:8080/api/admin/user/all');\n    }\n    \n}","import { Component, OnInit } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { HelloWorldService } from '../hello-world.service';\n\n@Component({\n  selector: 'app-hello-world',\n  templateUrl: './hello-world.component.html',\n  styleUrls: ['./hello-world.component.css']\n})\nexport class HelloWorldComponent implements OnInit {\n\n  welcomeMessage = '';\n\n  constructor(\n    private route: ActivatedRoute,\n    private router: Router, \n    private helloWorldService: HelloWorldService,\n    ) { }\n\n  ngOnInit() {\n    console.log('passou aqui hello-world.component inicio');\n    this.helloWorldService.executeHelloWorldService2().subscribe(res => {\n      console.log(res);\n    });\n    console.log('passou aqui hello-world.component fim');\n\n\n    // console.log('passou aqui hello-world.component inicio');\n    // this.helloWorldService.executeHelloWorldService().subscribe((res) => {\n    //   this.welcomeMessage = res.content;\n    //   console.log('passou aqui hello-world.component fim: ' + res.content);\n    // });\n  }\n\n\n}","<div class=\"container\">\n    Message from server ->  <h1>{{this.welcomeMessage}}</h1>\n  </div>","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthenticationService {\n\n  // BASE_PATH: 'http://glucontrol.pedroazzam.me:8080'\n  USER_NAME_SESSION_ATTRIBUTE_NAME = 'authenticatedUser'\n\n  public username: String;\n  public password: String;\n\n  constructor(private http: HttpClient) {\n\n  }\n\n  authenticationService(username: String, password: String) {\n    return this.http.get('http://glucontrol.pedroazzam.me:8080/api/v1/basicauth',\n      { headers: { authorization: this.createBasicAuthToken(username, password) } }).pipe(map((res) => {\n        this.username = username;\n        this.password = password;\n        this.registerSuccessfulLogin(username, password);\n      }));\n  }\n\n  createBasicAuthToken(username: String, password: String) {\n    return 'Basic ' + window.btoa(username + \":\" + password)\n  }\n\n  registerSuccessfulLogin(username, password) {\n    sessionStorage.setItem(this.USER_NAME_SESSION_ATTRIBUTE_NAME, username)\n  }\n\n  logout() {\n    sessionStorage.removeItem(this.USER_NAME_SESSION_ATTRIBUTE_NAME);\n    this.username = null;\n    this.password = null;\n  }\n\n  isUserLoggedIn() {\n    let user = sessionStorage.getItem(this.USER_NAME_SESSION_ATTRIBUTE_NAME)\n    if (user === null) return false\n    return true\n  }\n\n  getLoggedInUserName() {\n    let user = sessionStorage.getItem(this.USER_NAME_SESSION_ATTRIBUTE_NAME)\n    if (user === null) return ''\n    return user\n  }\n}","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'gc-fe';\n}\n","<app-menu></app-menu>\n<router-outlet></router-outlet>","import { Component, OnInit } from '@angular/core';\nimport { AuthenticationService } from '../login/auth.service';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { HelloWorldService } from '../hello-world.service';\n\n@Component({\n  selector: 'app-menu',\n  templateUrl: './menu.component.html',\n  styleUrls: ['./menu.component.css']\n})\nexport class MenuComponent implements OnInit {\n\n  isLoggedIn = false;\n  welcomeMessage = '';\n\n  constructor(private route: ActivatedRoute,\n    private router: Router,\n    public authenticationService: AuthenticationService,\n    private helloWorldService: HelloWorldService\n    ) { }\n\n  ngOnInit() {\n    this.isLoggedIn = this.authenticationService.isUserLoggedIn();\n    console.log('menu ->' + this.isLoggedIn);\n  }\n\n  handleLogout() {\n    this.authenticationService.logout();\n  }\n\n  handleHW(){\n    // this.helloWorldService.executeHelloWorldService().subscribe((res) => {\n    //   this.welcomeMessage = res.content;\n    // });\n\n    console.log('passou aqui teste hello-world.component inicio');\n    this.helloWorldService.executeHelloWorldService2().subscribe(res => {\n      console.log(res);\n    });\n    console.log('passou aqui teste hello-world.component fim');\n\n    console.log('Passo aqui HW')\n    this.router.navigate(['/hello-world']);\n    // this.helloWorldComponent.handleHelloWorld();\n  }\n\n  handleUN(){\n    console.log(this.authenticationService.getLoggedInUserName());\n  }\n\n}","<header>\n    <nav class=\"navbar navbar-expand-md navbar-dark bg-dark\">\n        <div><a href=\"https://www.pedroazzam.me\" class=\"navbar-brand\">Pedro Azzam - Glu Control</a></div>\n        \n            <ul class=\"text-center list-inline py-3\">\n                <li class=\"list-inline-item\">\n                    <!--<a *ngIf=\"isLoggedIn\" routerLink=\"/users\" class=\"btn btn-info\">List Users</a>-->\n                    <a *ngIf=\"authenticationService.isUserLoggedIn()\" class=\"nav-link\" href=\"/users\" (click)=handleUsers()>List Users</a>\n                </li>\n                <li class=\"list-inline-item\">\n                    <a *ngIf=\"authenticationService.isUserLoggedIn()\" routerLink=\"/adduser\" class=\"btn btn-info\">Add User</a>\n                </li>\n\n                <li class=\"list-inline-item\">\n                    <a *ngIf=\"authenticationService.isUserLoggedIn()\" class=\"btn btn-info\" (click)=handleHW()>HW</a>\n                </li>\n\n                <li class=\"list-inline-item\">\n                    <a *ngIf=\"authenticationService.isUserLoggedIn()\" class=\"btn btn-info\" (click)=handleUN()>userName</a>\n                </li>\n            </ul>\n        \n          <ul class=\"navbar-nav navbar-collapse justify-content-end\">\n            <li>\n                <a *ngIf=\"authenticationService.isUserLoggedIn()\" class=\"nav-link\" routerLink=\"/logout\" (click)=handleLogout()>Logout</a>\n            </li>\n        </ul>\n    </nav>\n  </header>","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms'; \n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { HelloWorldComponent } from './hello-world/hello-world.component';\nimport { MenuComponent } from './menu/menu.component';\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { HelloWorldService } from './hello-world.service';\nimport { LoginComponent } from './login/login.component';\nimport { LogoutComponent } from './logout/logout.component';\nimport { HttpInterceptorService } from './http-interceptor.service';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    HelloWorldComponent,\n    MenuComponent,\n    LoginComponent,\n    LogoutComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    HttpClientModule,\n    FormsModule\n  ],\n  providers: [\n    {\n      provide: HTTP_INTERCEPTORS,\n      useClass: HttpInterceptorService,\n      multi: true\n    }\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-logout',\n  templateUrl: './logout.component.html',\n  styleUrls: ['./logout.component.css']\n})\nexport class LogoutComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>logout works!</p>\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { HelloWorldComponent } from './hello-world/hello-world.component';\nimport { LoginComponent } from './login/login.component';\nimport { LogoutComponent } from './logout/logout.component';\n\nconst routes: Routes = [\n  {path: 'login', component: LoginComponent},\n  {path: '', component: LoginComponent},\n  {path: 'hello-world', component: HelloWorldComponent},\n  {path: 'logout', component: LogoutComponent},\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { AuthenticationService } from './auth.service';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n\n  username: string;\n  password : string;\n  errorMessage = 'Invalid Credentials';\n  successMessage: string;\n  invalidLogin = false;\n  loginSuccess = false;\n\n  constructor(\n    private route: ActivatedRoute,\n    private router: Router,\n    private authenticationService: AuthenticationService) {   }\n\n  ngOnInit() {\n  }\n\n  handleLogin() {\n    this.authenticationService.authenticationService(this.username, this.password).subscribe((result)=> {\n      this.invalidLogin = false;\n      this.loginSuccess = true;\n      this.successMessage = 'Login Successful.';\n      // this.router.navigate(['/hello-world']);\n    }, () => {\n      this.invalidLogin = true;\n      this.loginSuccess = false;\n    });      \n  }\n}","<div class=\"container col-lg-6\">\n  <h1 class=\"text-center\">Login</h1>\n  <div class=\"card\">\n    <div class=\"card-body\">\n      <form class=\"form-group\">\n        <div class=\"alert alert-warning\" *ngIf='invalidLogin'>{{errorMessage}}</div>\n        <div class=\"alert alert-success\" *ngIf='loginSuccess'>{{successMessage}}</div>\n        <div class=\"form-group\">\n          <label for=\"email\">User Name :</label>\n          <input type=\"text\" class=\"form-control\" id=\"username\" [(ngModel)]=\"username\" placeholder=\"Enter User Name\"\n            name=\"username\">\n        </div>\n        <div class=\"form-group\">\n          <label for=\"pwd\">Password:</label>\n          <input type=\"password\" class=\"form-control\" [(ngModel)]=\"password\" id=\"password\" placeholder=\"Enter password\"\n            name=\"password\">\n        </div>\n        <button (click)=handleLogin() class=\"btn btn-success\">Login</button>\n      </form>\n    </div>\n  </div>\n</div>","import { HttpInterceptor, HttpRequest, HttpHandler, HttpEvent, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { AuthenticationService } from './login/auth.service';\n\n@Injectable()\nexport class HttpInterceptorService implements HttpInterceptor {\n\n    constructor(private authenticationService: AuthenticationService) { }\n\n    intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n        if (this.authenticationService.isUserLoggedIn() && req.url.indexOf('basicauth') === -1) {\n            const authReq = req.clone({\n                headers: new HttpHeaders({\n                    'Content-Type': 'application/json',\n                    'Authorization': `Basic ${window.btoa(this.authenticationService.username + \":\" + this.authenticationService.password)}`\n                })\n            });\n            return next.handle(authReq);\n        } else {\n            return next.handle(req);\n        }\n    }\n}","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"]}